module finalproject(SW, KEY)
//wire [1:0] diffculty;
//assign diffculty = SW[1:0];



endmodule 

module FSM(
	input resetn,
	input clock,
	input go,
	input start_counter,
	input start_enemy,
	output draw_enemy,
	output draw_counter
	);
	localparam  	START_ENEMY 	= 4'd0,
					DRAW_ENEMY		= 4'd1,
					START_COUNTER	= 4'd2,
					DRAW_COUNTER	= 4'd3;
					
	always @(*)
	begin: state_table 
            case (current_state)
				START_ENEMY: next_state = start_enemy ? DRAW_ENEMY : START_ENEMY;
                DRAW_ENEMY: next_state = go ? START_COUNTER : DRAW_ENEMY;
                START_COUNTER: next_state = start_counter ? DRAW_COUNTER : START_COUNTER;
				DRAW_COUNTER: next_state = go ? START_ENEMY : DRAW_COUNTER;
            default: next_state = START_ENEMY;
        endcase
    end 
	
	always @(*)
    begin: enable_signals
		draw_enemy	= 1'b0;
		draw_counter= 1'b0;

        case (current_state)
	    DRAW_ENEMY:begin
	    			draw_enemy	= 1'b1;
					end
        DRAW_COUNTER: begin
					draw_counter= 1'b1;
					end
        endcase
	
endmodule

module datapath(
	input resetn,
	input clock,
	input draw_enemy,
	input draw_counter,
	input increase,
	output reg doneï¼Œ
	output reg start_counter,
	output reg start_enemy,
	output [7:0] x,
	output [6:0] y,
	output [2:0] colour, 
	output reg enable
	);
	wire [7:0] x_e0;
	wire [6:0] y_e0;
	wire [2:0] colour_e0;
	wire enable_e0;
	wire [7:0] x_c0;
	wire [6:0] y_c0;
	wire [2:0] colour_c0;
	wire enable_c0;
	reg  [17:0]out;
	enemy e0(
		.CLOCK_50(clock),
		.x_in(8'd30),
		.y_in(7'd0),
		.resetn(resetn),
		.speed(2'd1),
		.x(x_e0),
		.y(y_e0),
		.colour(colour_e0),
		.writeEn(enable_e0)
		);
	
	counter c0(
		.CLOCK_50(clock),
		.resetn(resetn),
		.increase(increase),
		.x(x_c0),
		.y(y_c0),
		.colour(colour_c0),
		.writeEn(enable_c0)
		);
	//NEED ADD THE PART	FOR COUNTER
	reg [4:0] write_e0 = 5'b00000;
	always @(posedge clock)begin
		if (enable_e0)begin
			write_e0 <= write_e0 + 1;
			if (write_e0 == 5'd31)
				start_enemy <= 1'b1;
		end
	end
	reg [4:0] read_e0 = 5'b00000;star
	always @(posedge clock)begin
		if (draw_enemy)begin
			read_e0 <= read_e0 + 1;
			if (read_e0 == 5'd31)begin
				done = 1'b1;
			end
		end
	end
	wire [17:0] data_e0;
	wire [17:0] out_e0;
	assign data_e0 = {x_e0[7:0], y_e0[6:0], colour_e0[2:0]};
	ram32x18(
		.clock(clock),
		.data(data_e0),
		.rdaddress(read_e0),
		.wraddress(write_e0),
		.wren(enable_e0),
		.q(out_e0)
		);
		
	reg [6:0] write_c0 = 7'd0;
	always @(posedge clock)begin
		if (enable_c0)begin
			if (write_c0 == 7'd89)begin
				write_c0 <= 7'd0;
				start_counter <= 1'b1;
			end
			else begin
				write_c0 <= write_c0 + 1;
			end
		end
	end
	reg [6:0] read_c0 = 7'd0;
	always @(posedge clock)begin
		if (draw_counter)begin
			if (read_c0 == 7'd89)begin
				read_c0 <= 7'd0;
				done <= 1'b1;
			end
			else
				read_c0 <= read_c0 + 1;	
		end
	end
	wire [17:0] data_c0;
	wire [17:0] out_c0;
	assign data_c0 = {x_c0[7:0], y_c0[6:0], colour_c0[2:0]};
	ram32x18(
		.clock(clock),
		.data(data_c0),
		.rdaddress(read_c0),
		.wraddress(write_c0),
		.wren(enable_c0),
		.q(out_c0);
		);
	//TO HERE
	always @(posedge clock)begin
		if (draw_enemy)begin
			start_enemy <= 1'b0;
			out = out_e0;
			enable = 1'b1;
		end	
		else if(draw_counter)begin
			start_counter <= 1'b0;
			out = out_c0;
			enable = 1'b1;
		end
		else begin
			enable = 0;
			done = 0;
		end
	end
	assign x = out[17:10];
	assign y = out[9:3];
	assign colour = out[2:0];
endmodule

module ram32x18 (
	clock,
	data,
	rdaddress,
	wraddress,
	wren,
	q);

	input	  clock;
	input	[17:0]  data;
	input	[4:0]  rdaddress;
	input	[4:0]  wraddress;
	input	  wren;
	output	[17:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1	  clock;
	tri0	  wren;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [17:0] sub_wire0;
	wire [17:0] q = sub_wire0[17:0];

	altsyncram	altsyncram_component (
				.address_a (wraddress),
				.address_b (rdaddress),
				.clock0 (clock),
				.data_a (data),
				.wren_a (wren),
				.q_b (sub_wire0),
				.aclr0 (1'b0),
				.aclr1 (1'b0),
				.addressstall_a (1'b0),
				.addressstall_b (1'b0),
				.byteena_a (1'b1),
				.byteena_b (1'b1),
				.clock1 (1'b1),
				.clocken0 (1'b1),
				.clocken1 (1'b1),
				.clocken2 (1'b1),
				.clocken3 (1'b1),
				.data_b ({18{1'b1}}),
				.eccstatus (),
				.q_a (),
				.rden_a (1'b1),
				.rden_b (1'b1),
				.wren_b (1'b0));
	defparam
		altsyncram_component.address_aclr_b = "NONE",
		altsyncram_component.address_reg_b = "CLOCK0",
		altsyncram_component.clock_enable_input_a = "BYPASS",
		altsyncram_component.clock_enable_input_b = "BYPASS",
		altsyncram_component.clock_enable_output_b = "BYPASS",
		altsyncram_component.intended_device_family = "Cyclone V",
		altsyncram_component.lpm_type = "altsyncram",
		altsyncram_component.numwords_a = 32,
		altsyncram_component.numwords_b = 32,
		altsyncram_component.operation_mode = "DUAL_PORT",
		altsyncram_component.outdata_aclr_b = "NONE",
		altsyncram_component.outdata_reg_b = "UNREGISTERED",
		altsyncram_component.power_up_uninitialized = "FALSE",
		altsyncram_component.read_during_write_mode_mixed_ports = "DONT_CARE",
		altsyncram_component.widthad_a = 5,
		altsyncram_component.widthad_b = 5,
		altsyncram_component.width_a = 18,
		altsyncram_component.width_b = 18,
		altsyncram_component.width_byteena_a = 1;


endmodule


module ram90x18 (
	clock,
	data,
	rdaddress,
	wraddress,
	wren,
	q);

	input	  clock;
	input	[17:0]  data;
	input	[6:0]  rdaddress;
	input	[6:0]  wraddress;
	input	  wren;
	output	[17:0]  q;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_off
`endif
	tri1	  clock;
	tri0	  wren;
`ifndef ALTERA_RESERVED_QIS
// synopsys translate_on
`endif

	wire [17:0] sub_wire0;
	wire [17:0] q = sub_wire0[17:0];

	altsyncram	altsyncram_component (
				.address_a (wraddress),
				.address_b (rdaddress),
				.clock0 (clock),
				.data_a (data),
				.wren_a (wren),
				.q_b (sub_wire0),
				.aclr0 (1'b0),
				.aclr1 (1'b0),
				.addressstall_a (1'b0),
				.addressstall_b (1'b0),
				.byteena_a (1'b1),
				.byteena_b (1'b1),
				.clock1 (1'b1),
				.clocken0 (1'b1),
				.clocken1 (1'b1),
				.clocken2 (1'b1),
				.clocken3 (1'b1),
				.data_b ({18{1'b1}}),
				.eccstatus (),
				.q_a (),
				.rden_a (1'b1),
				.rden_b (1'b1),
				.wren_b (1'b0));
	defparam
		altsyncram_component.address_aclr_b = "NONE",
		altsyncram_component.address_reg_b = "CLOCK0",
		altsyncram_component.clock_enable_input_a = "BYPASS",
		altsyncram_component.clock_enable_input_b = "BYPASS",
		altsyncram_component.clock_enable_output_b = "BYPASS",
		altsyncram_component.intended_device_family = "Cyclone V",
		altsyncram_component.lpm_type = "altsyncram",
		altsyncram_component.numwords_a = 90,
		altsyncram_component.numwords_b = 90,
		altsyncram_component.operation_mode = "DUAL_PORT",
		altsyncram_component.outdata_aclr_b = "NONE",
		altsyncram_component.outdata_reg_b = "UNREGISTERED",
		altsyncram_component.power_up_uninitialized = "FALSE",
		altsyncram_component.read_during_write_mode_mixed_ports = "DONT_CARE",
		altsyncram_component.widthad_a = 7,
		altsyncram_component.widthad_b = 7,
		altsyncram_component.width_a = 18,
		altsyncram_component.width_b = 18,
		altsyncram_component.width_byteena_a = 1;


endmodule